var loki = require('lokijs');

// db options
var lokijsOptions = 
	{
		autosave: true,
		autosaveInterval: 2*1000,	// TODO : export in ENV settings to be configurable
		autoload: true,
		autoloadCallback: loadHandler,
	}

// db initialization
var db = new loki('lokidb.json', lokijsOptions);

// database load handler
function loadHandler() {
	// load persisted database
	db.loadDatabase({}, function() {
		// initialize collection if not already existing
	    if(!db.getCollection('messages')) {
	 	   db.addCollection('messages', {unique: ['id']})
		}
	});
}

module.exports = {
	// add a message to collection
	addMessage : function(message, callback) {
		var message = db.getCollection('messages').insert(message);
		if (!message) {
			callback("error while saving message, [message.id] might already exist", null);
		} else {
			callback(null, message);
		}
		
	},

	// return messages younger than given time (in milliseconds)
	getLastMessages : function(timeInMillis, callback) {
		// calculate mimimum timestamp
		var nowMillis = new Date().getTime();
		var lasHourMillis = nowMillis - timeInMillis;

		// check time param & time diff
		if (!(timeInMillis > 0) || !(lasHourMillis > 0)) {
			callback("wrong time parameter, cannot find messages in non-coherent time interval, now=" + nowMillis + " and paramTime=" + timeInMillis , null);
		} else {
			// query collection
			var queryLasHourMessages = {'timestamp': {'$gte' : lasHourMillis}};	// $gte = Greater or Equals
			var messages = db.getCollection('messages').find(queryLasHourMessages);

			if (!messages) {
				callback("no messages found", null);
			} else {
				callback(null, messages);
			}
		}
	}
};