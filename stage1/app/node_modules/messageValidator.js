/*
	Validate Messages using "validator.js"
	See documentation for usage : https://github.com/chriso/validator.js
*/

var validator = require('validator');

module.exports = {

	// validate message data
	validate : function(body, callback) {

		// potentials errors array
		var errors = [];

		// attributes values
		var id = body.id;
		var timestamp = body.timestamp;
		var sensorType = body.sensorType;
		var value = body.value;

		// attributes errors
		idError = {input : "id", error : "must be an alphanumeric string whith a length in range [1,64]"};
		timestampError = {input : "timestamp", error : "must be an ISO8601-RFC3339 complient date-time, example : 1985-04-12T23:20:50.52Z"};
		sensorTypeError = {input : "sensorType", error : "must be an int32"};
		valueError = {input : "value", error : "must be an int64"};

		// check attributes format & values
		if(!typeof id != "string'" || !validator.isLength(body.id,{min : 1, max : 64}) || !validator.isAlphanumeric(body.id)) {
			errors.push(idError);
		}
		if (!typeof timestamp != "string'" || !validator.isISO8601(body.timestamp)) {
			errors.push(timestampError);
		}
		if (!typeof sensorType != "number'" || !validator.isInt(body.sensorType, {min : 0, max : 2147483647})) {
			errors.push(sensorTypeError);
		}
		if (!typeof value != "number'" || !validator.isInt(body.value, {min : 0, max : 9223372036854775807})) {
			errors.push();
		}
		if (errors.length > 0) {
			callback(errors);
		} else {
			callback(null);
		}
	},

};