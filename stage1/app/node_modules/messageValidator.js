/*
	Validate Messages using "validator.js"
	See documentation for usage : https://github.com/chriso/validator.js
*/

var validator = require('validator');

module.exports = {

	// validate message data
	validate : function(message, callback) {

		// potentials errors
		var errors = [];

		// chack id
		if(!validator.isLength(message.id,{min : 1, max : 64}) || !validator.isAlphanumeric(message.id)) {
			errors.push({input : "id", error : "must be an alphanumeric string with a length in range [1,64]"});
		}

		// check timestamp
		if (!validator.isISO8601(message.timestamp)) {
			errors.push({input : "timestamp", error : "must be an ISO8601-RFC3339 complient date-time, example : 1985-04-12T23:20:50.52Z"});
		}

		// check sensor type
		if (!validator.isInt(JSON.stringify(message.sensorType), {min : 0, max : 2147483647})) {
			errors.push({input : "sensorType", error : "must be an int32"});
		}

		// check value
		if (!validator.isInt(JSON.stringify(message.value), {min : 0, max : 9223372036854775807})) {
			errors.push({input : "value", error : "must be an int64"});
		}
		
		// return errors if any
		if (errors.length > 0) {
			callback(errors);
		} else {
			callback(null);
		}
	},

};