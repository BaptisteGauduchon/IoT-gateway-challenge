var loki = require('lokijs')

// db options
var lokijsOptions =
{
  autosave: true,
  autosaveInterval: process.env.LOKIDB_PERSIST_INTERVAL || 10 * 1000, // default persitence every 10 seconds
  autoload: true,
  autoloadCallback: loadHandler,
}

// db initialization
var db = new loki('lokidb.json', lokijsOptions)

// database load handler
function loadHandler () {
  // load persisted database
  db.loadDatabase({}, function () {
    // initialize collection if not already existing
    if (!db.getCollection('messages')) {
      db.addCollection('messages', {unique: ['id']})
    }
  })
}

module.exports = {
  // add a message to collection
  addMessage: function (message, callback) {
    var message = db.getCollection('messages').insert(message)
    if (!message) {
      callback('error while saving message, [message.id] might already exist')
    } else {
      callback(null, message)
    }
  },

  // return messages younger than given time (in milliseconds)
  getLastMessages: function (startTimeMillis, durationMillis, callback) {

    // check params
    var nowMillis = new Date().getTime()
    if (!(startTimeMillis > 0) || !(durationMillis > 0) || !(startTimeMillis < nowMillis)) {
      var err = 'wrong parameters : timestamp=' + startTimeMillis + ' and duration=' + durationMillis
      callback(err)
    } else {
      // query collection
      var queryLasHourMessages = {'timestamp': {'$gte': startTimeMillis, '$lte': startTimeMillis + durationMillis}}; // $gte = Greater Than or Equals
      var messages = db.getCollection('messages').find(queryLasHourMessages)

      if (!messages) {
        callback('no messages found')
      } else {
        callback(null, messages)
      }
    }
  }
}
