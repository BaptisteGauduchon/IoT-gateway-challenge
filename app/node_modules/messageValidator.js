/*
	Validate Messages using AJV (Another JSON Validator)
	See documentation for usage : https://github.com/epoberezkin/ajv
*/
var Ajv = require('ajv')
var ajv = Ajv({'allErrors': true, 'format': 'full', 'async': true})

var messageSchema = {
  '$async': true,
  'type': 'object',
  'properties': {
    'id': {
      'type': 'string',
      'maxLength': 64,
      'pattern': '^[a-zA-Z0-9]+$' // include minLength in pattern
    },
    'timestamp': {
      'type': 'string',
      'format': 'date-time'
    },
    'sensorType': {
      // int32
      'type': 'number',
      'minimum': -2147483648,
      'maximum': 2147483647,
      'multipleOf': 1
    },
    'value': {
      // int64
      'type': 'number',
      'minimum': -9223372036854775808,
      'maximum': 9223372036854775807,
      'multipleOf': 1
    }
  },
  'required': ['id', 'timestamp', 'sensorType', 'value']
}

// could use compileAsync to load message schema from file (see http://epoberezkin.github.io/ajv/#asynchronous-compilation)
var validate = ajv.compile(messageSchema)

module.exports = {
  // validate message data
  validate: function (message, callback) {
    validate(message).then(function (valid) {
      // validation succes
      callback(null)
    })
      .catch(function (err) {
        // throw non validation related errors
        if (!(err instanceof Ajv.ValidationError)) throw err
        // return validation error
        callback(err)
      })
  }
}
